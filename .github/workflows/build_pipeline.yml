name: Build Pipelines

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

env:
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true
  IMAGE_NAME: zull123/dtl-app
  DEPLOYMENT_NAME: sdp-web-app
  PORT: 5000

jobs:
  job1:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Switch to Current Branch
        run: git checkout ${{ env.BRANCH }}

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run unit tests
        run: |
          cd app
          python3 -m pytest

  job2:
    name: Deliver Artifact
    needs: job1
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: zull123/dtl-dp:latest

  job3:
    name: Deploy
    needs: job2
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a set of commands using the runners shell
      - name: "Write Config & Key Files"
        run: |
          mkdir ~/.oci
          echo "[DEFAULT]" >> ~/.oci/config
          echo "user=${{secrets.OCI_USER_OCID}}" >> ~/.oci/config
          echo "fingerprint=${{secrets.OCI_FINGERPRINT}}" >> ~/.oci/config
          echo "tenancy=${{secrets.OCI_TENANCY_OCID}}" >> ~/.oci/config
          echo "region=${{secrets.OCI_REGION}}" >> ~/.oci/config         
          echo "${{secrets.OCI_PASSPHRASE}}" >> ~/.oci/key.pem
          echo "key_file=~/.oci/key.pem" >> ~/.oci/config

      - name: "Install OCI CLI"
        run: |
          curl -L -O https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
          chmod +x install.sh
          ./install.sh --accept-all-defaults
          echo "::add-path::/home/runner/bin"
          exec -l $SHELL

      - name: "Fix Config File Permissions"
        run: |
          oci setup repair-file-permissions --file ~/.oci/key.pem
          oci setup repair-file-permissions --file ~/.oci/config

      - name: "Download the KUBECONFIG"
        run: |
          mkdir -p ~/.kube
          oci ce cluster create-kubeconfig --cluster-id ${{ secrets.OKE_OCID }} --file ~/.kube/config --region ${{secrets.OCI_REGION}} --token-version 2.0.0 
          export KUBECONFIG=~/.kube/config

      - name: "Deploy the API on OKE"
        run: |
          kubectl delete deployment sdp-app
          kubectl delete service sdp-app
          kubectl apply -f kubernetes/deployment.yaml
          kubectl get pods
          kubectl get svc
